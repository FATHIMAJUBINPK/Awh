#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    if (*head != NULL)
        (*head)->prev = newNode;
    *head = newNode;
}

void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
}


void insertAfterPosition(struct Node** head, int data, int position) {
int i;
    if (*head == NULL || position < 1) {
        printf("Position is out of range\n");
        return;
    }
    struct Node* temp = *head;
    for (i = 1; i < position && temp != NULL; i++)
        temp = temp->next;
    if (temp == NULL) {
        printf("Position is out of range\n");
        return;
    }

     }
    struct Node* newNode = createNode(data);
    newNode->next = temp->next;
    if (temp->next != NULL)
        temp->next->prev = newNode;
    temp->next = newNode;
    newNode->prev = temp;
}


void deleteAtBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* temp = *head;
    *head = (*head)->next;
    if (*head != NULL)
        (*head)->prev = NULL;
    free(temp);
}


void deleteAtEnd(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
          return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL)
        temp = temp->next;
    if (temp->prev != NULL)
        temp->prev->next = NULL;
    else
        *head = NULL;
    free(temp);
}

void deleteAtPosition(struct Node** head, int position) {
int i;
    if (*head == NULL || position < 1) {
        printf("Position is out of range\n");
        return;
    }
    struct Node* temp = *head;
    for (i = 1; i < position && temp != NULL; i++)
        temp = temp->next;
    if (temp == NULL) {
        printf("Position is out of range\n");
        return;
    }
    if (temp->prev != NULL)
              temp->prev->next = temp->next;
    else
        *head = temp->next;
    if (temp->next != NULL)
        temp->next->prev = temp->prev;
    free(temp);
}


void displayList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
         int choice, data, position;

    while (1) {
        printf("\nDoubly Linked List Operations:\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert after position\n");
        printf("4. Delete at beginning\n");
        printf("5. Delete at end\n");
        printf("6. Delete at position\n");
        printf("7. Display list\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at beginning: ");
                scanf("%d", &data);
                insertAtBeginning(&head, data);
                break;
            case 2:
                printf("Enter data to insert at end: ");
                scanf("%d", &data);
                insertAtEnd(&head, data);
                break;
              case 3:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position after which to insert: ");
                scanf("%d", &position);
                insertAfterPosition(&head, data, position);
                break;
            case 4:
                deleteAtBeginning(&head);
                break;
            case 5:
                deleteAtEnd(&head);
                break;
            case 6:
                printf("Enter position of node to delete: ");
                scanf("%d", &position);
                deleteAtPosition(&head, position);
                break;
            case 7:
                printf("Doubly Linked List: ");
                displayList(head);
                break;
            case 8:
                printf("Exiting...\n");
                return 0;
            default:
              printf("Invalid choice! Please try again.\n");
        }
    }
}



CIRCULAR QUEUE

 #include<stdio.h>
#include<stdlib.h>
#define max 6
void enqueue();
void dequeue();
void display();
int queue[max];
int front=-1;
int rear=-1;
void main()
{
int choice=0,x;
printf("Enter queue operation");
while(choice!=4)
{
printf("\n 1.insert(enqueue) \n2.delete(dequeue) \n3.display \n4.exit");
printf("Enter your choice");
scanf("%d",&choice);
switch(choice)
{
case 1:
{
printf("Enter the element to insert");
scanf("%d",&x);
enqueue(x);
break;
    }
case 2:
{
dequeue();
break;
}
case 3:
{
display();
break;
}
case 4:
{
printf("Exit");
break;
}
default:
{
printf("please enter valid choice");
}
};
}
}
void enqueue(int element)
{
if(front==-1&&rear==-1)
{
front=0;
rear=0;
queue[rear]=element;
printf("Element is inserted \n");
}
else if((rear+1)%max==front)
{
printf("queue is overflow");
}
else
{
rear=(rear+1)%max;
queue[rear]=element;
printf("element inserted");
}
}
void dequeue()
{
if((front==-1)&&(rear==-1))
{
printf("underflow");
}
else if(front==rear)
{
printf("the equeue element is %d",queue[front]);
 front=(front+1)%max;
}}
void display()
{
int i=front;
if(front==-1&&rear==-1)
{
printf("queue is empty");
}
else
{
printf("elements in queue are :");
while(i<=rear)
{
printf("%d\n",queue[i]);
i=(i+1)%max;
}
}
}

STACK USING LL

  #include<stdio.h>
#include<stdlib.h>
void push();
void pop();
void display();
struct node
        {
        int val;
        struct node *next;
        };
        struct node *head;

 void main()
{
        int choice=0;
        printf("\n stack operation using linkedlist \n");
        printf("\n");
        while(choice!=4)
{
        printf("\n\nchose one from the below options");
        printf("\n1.push\n2.pop\n3.dispay\n4.exit\n");
        printf("\n Enter your choice");
        scanf("%d",&choice);
        switch(choice)
{
        case 1:
         {
        push();
        break;
        }
        case 2:
        {
        pop();
        break;
        }
        case 3:
        {
        display();
        break;
        }
        case 4:
        {
        printf("exit");
        break;
        }
        default:
        {
        printf("please enter valid choice");
        }
        };
        }
        }
  void push()
{
 int val;
 struct node *ptr=(struct node*)malloc(sizeof(struct node));
 if(ptr==NULL)
    {
      printf("not able to push the element");
     }
 else
    {
      printf("Enter the value");
      scanf("%d",&val);
      if(head==NULL)
        {
          ptr->val=val;
          ptr->next=head;
          head=ptr;
        }
else{
        ptr->val=val;
        ptr->next=head;
        head=ptr;
        }
         printf("item pushed");
        }
        }
void pop()
{
 int item;
 struct node *ptr;
 if(head==NULL)
    {
        printf("Underflow");
    }
 else
    {
      ptr=head;
     head=head->next;
     free(ptr);
      printf("Item popped");
    }
}
void display()
{
 int i;
 struct node *ptr;
 ptr=head;
 if(ptr==NULL)
     {
       printf("Stack is empty\n");
      }
 else
   {
        printf("printing stack elements \n");
        while(ptr!=NULL)
        {
        printf("%d\n",ptr->val);
        ptr=ptr->next;
        }
    }
    }
                    